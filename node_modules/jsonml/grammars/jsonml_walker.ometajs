ometa JsonMLWalker {
  
  walk          = undefined:t                                                            -> this.handle_undefined()
                | &anything:n [undefined:u]                                              -> this.handle_undefined(n)
                | &anything:n [:t :prop walk(t, n):ans]                                  -> ans
                | ?(!this.force_rules) &anything:n [:t :prop walk*:cs]                   -> this.replace_children(n, cs),

  walk string:t = ?(typeof this[t] === 'function') apply(t),

  // walk a child and at the same time assure that it has correct type
  walkType   :t = &hasType(t) walk,

  hasType    :t = :n ?n.hasType(t)                                                       -> n
}

JsonMLWalker.replace_children = function(obj, children) {
  
  //console.log("Call to replace_children with", obj, children);

  // remove children
  obj.splice(2, obj.length)

  // add children again
  obj.push.apply(obj, children)

  //console.log("New object:", obj);
 
  return obj;
}

JsonMLWalker.handle_undefined = function() { 
  if(arguments.length === 1) 
    return [undefined]; 
  else
    return undefined;
}

JsonMLWalker.force_rules = false;

module.exports = JsonMLWalker;
