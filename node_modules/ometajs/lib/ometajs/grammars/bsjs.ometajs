ometa BSJSParser {
  space        = ^@space | < ``//'' (~'\n' char)*> | @fromTo('/*', '*/'),
  nameFirst    = @letter | '$' | '_',
  nameRest     = @nameFirst | @digit,
  iName        = <@nameFirst @nameRest*>,
  isKeyword :x = ?BSJSParser._isKeyword(x),
  name         = @iName:n ~isKeyword(n)                                               -> [#name, n=='self' ? '$elf' : n],
  keyword      = @iName:k isKeyword(k)                                                -> [k, k],
  hexDigit     = @char:x {BSJSParser.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0)        -> v,
  hexLit       = hexLit:n hexDigit:d                                                 -> (n * 16 + d)
               | hexDigit,
  number       = ``0x'' hexLit:n                                                     -> [#number, n]
               | <digit+ (('.' | ('e' | 'E') ('-' | '+')?) digit+)?>:f               -> [#number, parseFloat(f)],
  escapeChar   = <'\\' char>:s -> {
                 switch (s) {
                   case '\\"': return '"';
                   case '\\\'': return '\'';
                   case '\\n': return '\n';
                   case '\\r': return '\r';
                   case '\\t': return '\t';
                   case '\\b': return '\b';
                   case '\\f': return '\f';
                   case '\\\\': return '\\';
                   default: return s.charAt(1);
                 }
               }
               | <'\\' ('u' hexDigit hexDigit hexDigit hexDigit
                      | 'x' hexDigit hexDigit)>:s -> {
                 JSON.parse('"' + s + '"')
               },
  str          = seq('"""')  (escapeChar | ~seq('"""') char)*:cs seq('"""')       -> [#string, cs.join('')]
               | '\'' (escapeChar | ~'\'' char)*:cs '\''                          -> [#string, cs.join('')]
               | '"'  (escapeChar | ~'"'  char)*:cs '"'                           -> [#string, cs.join('')]
               | ('#' | '`') @iName:n                                             -> [#string, n],
  special      = ( '('   | ')'    | '{'    | '}'     | '['    | ']'     | ','
                 | ';'   | '?'    | ':'    | ``!=='' | ``!='' | ``==='' | ``==''
                 | ``='' | ``>='' | '>'    | ``<=''  | '<'    | ``++''  | ``+=''
                 | '+'   | ``--'' | ``-='' | '-'     | ``*='' | '*'     | ``/=''
                 | '/'   | ``%='' | '%'    | ``&&='' | ``&&'' | ``||='' | ``||''
                 | ``>>>'' | ``<<<'' | ``>>''
                 | ``&='' | ``|='' | ``^=''
                 | '&'   | '|'    | '^'    | '~'
                 | '.'   | '!'                                                   ):s -> [s, s],
  token        = @spaces (@name | @keyword | @number | @str | @special),
  toks         = @token*:ts @spaces end                                                -> ts,
  spacesNoNl   = (~'\n' space)*,

  expr = commaExpr,
  commaExpr = commaExpr:e1 "," asgnExpr:e2 -> [#binop, ",", e1, e2]
            | asgnExpr,
  asgnExpr     = condExpr:e ( "="   asgnExpr:rhs                                     -> [#set,  e, rhs]
                            | ( "+=" | "-=" | "*=" | "/="
                              | "&&=" | "||="
                              | "%=" | "<<=" | ">>=" | ">>>="
                              | "&=" | "^="  | "|=" ):op asgnExpr:rhs                -> [#mset, e, op.slice(0, -1), rhs]
                            | empty                                                  -> e
                            ),
  condExpr     = orExpr:e ( "?"   condExpr:t   ":" condExpr:f                        -> [#condExpr, e, t, f]
                          | empty                                                    -> e
                          ),
  orExpr       = orExpr:x ("||"|"&&"):op bitExpr:y -> [#binop, op, x, y]
               | bitExpr,
  bitExpr      = bitExpr:x ("|"|"^"|"&"):op eqExpr:y -> [#binop, op, x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ("=="|"!="|"==="|"!=="):op relExpr:y                       -> [#binop, op,  x, y]
               | relExpr,
  relExpr      = relExpr:x (">"|">="|"<"|"<="|"instanceof"|"in"):op shiftExpr:y      -> [#binop, op,  x, y]
               | shiftExpr,
  shiftExpr    = shiftExpr (">>>"|"<<<"|">>"):op addExpr:y                           -> [#binop, op,  x, y]
               | addExpr,
  addExpr      = addExpr:x ("+"|"-"):op mulExpr:y                                    -> [#binop, op,  x, y]
               | mulExpr,
  mulExpr      = mulExpr:x ("*"|"/"|"%"):op unary:y                                  -> [#binop, op,  x, y]
               | unary,
  unary        = ("-"|"+"):op postfix:p                                              -> [#unop,  op,     p]
               | ("--"|"++"):op postfix:p                                            -> [#preop, op,     p]
               | ("!"|"~"|"void"|"delete"|"typeof"):op unary:p                       -> [#unop,  op,     p]
               | postfix,
  postfix      = primExpr:p ( spacesNoNl ("++"|"--"):op                              -> [#postop, op, p]
                            | empty                                                  -> p
                            ),
  primExpr     = primExpr:p ( "(" listOf(#asgnExpr, ','):as ")"                       -> [#call, p].concat(as)
                            | "." "name":m "(" listOf(#asgnExpr, ','):as ")"          -> [#send, m, p].concat(as)
                            | "." spaces @iName:m "(" listOf(#asgnExpr, ','):as ")"
                              isKeyword(m)                                            -> [#send, m, p].concat(as)
                            )
               | memberExpr,
  memberExpr   = memberExpr:p ( "[" expr:i "]"                                       -> [#getp, i, p]
                              | "." "name":f                                         -> [#getp, [#string, f], p]
                              | "." spaces @iName:f isKeyword(f)                     -> [#getp, [#string, f], p]
                              )
               | newExpr,
  newExpr      = "new" memberExpr:n "(" listOf(#asgnExpr, ","):as ")"                -> [#new, n].concat(as)
               | "new" memberExpr:n                                                  -> [#new, n]
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                                      -> e
               | "this"                                                              -> [#this]
               | "name":n                                                            -> [#get, n]
               | "number":n                                                          -> [#number, n]
               | "string":s                                                          -> [#string, s]
               | "function" funcRest
               | "new" "name":n "(" listOf(#asgnExpr, ','):as ")"                    -> [#new, n].concat(as)
               | "new" "name":n                                                      -> [#new, n]
               | "[" listOf(#asgnExpr, ','):es "]"                                   -> [#arr].concat(es)
               | json
               | re,
  json         = "{" listOf(#jsonBinding, ','):bs "}"                                -> [#json].concat(bs),
  jsonBinding  = jsonPropName:n ":" asgnExpr:v                                       -> [#binding, n, v],
  jsonPropName = "name" | "number" | "string" | spaces @iName:n isKeyword(n)         -> n,
  re           = spaces <'/' reBody '/' reFlag*>:x                                   -> [#regExp, x],
  reBody       = re1stChar reChar*,
  re1stChar    = ~('*' | '\\' | '/' | '[') reNonTerm
               | escapeChar
               | reClass,
  reChar       = re1stChar | '*',
  reNonTerm    = ~('\n' | '\r') char,
  reClass      = '[' reClassChar* ']',
  reClassChar  = ~('[' | ']') reChar,
  reFlag       = nameFirst,
  formal       = spaces "name",
  funcRest     = "(" listOf(#formal, ','):fs ")" "{" srcElems:body "}"               -> [#func, fs, body],
  sc           = spacesNoNl ('\n' | &'}' | end)
               | ";",
  binding      = "name":n "=" asgnExpr:v                                             -> [n, v]
               | "name":n                                                            -> [n],
  block        = "{" srcElems:ss "}"                                                 -> ss,
  vars         = "var" listOf(#binding, ','):bs                                      -> [#var].concat(bs),
  stmt         = block
               | vars:bs sc                                                          -> bs
               | "if" "(" expr:c ")" stmt:t ( "else" stmt
                                            | empty -> [#get, 'undefined'] ):f       -> [#if, c, t, f]
               | "while" "(" expr:c ")" stmt:s                                       -> [#while,   c, s]
               | "do" stmt:s "while" "(" expr:c ")" sc                               -> [#doWhile, s, c]
               | "for" "(" ( vars
                           | expr
                           | empty -> [#get, 'undefined'] ):i
                       ";" ( expr
                           | empty -> [#get, 'true']      ):c
                       ";" ( expr
                           | empty -> [#get, 'undefined'] ):u
                       ")" stmt:s                                                    -> [#for, i, c, u, s]
               | "for" "(" ( "var" binding:b "in" asgnExpr:e                         -> [ [#var, b], e ]
                           | expr:e ?(e[0] === 'binop' && e[1] === 'in')             -> { e.slice(2) }
                           ):cond
                       ")" stmt:s                                                    -> [#forIn, cond[0], cond[1], s]
               | "switch" "(" expr:e ")" "{"
                   ( "case" asgnExpr:c ":" srcElems:cs -> [#case, c, cs]
                   | "default"     ":" srcElems:cs -> [#default, cs] )*:cs
                 "}"                                                                 -> [#switch, e].concat(cs)
               | "break" sc                                                          -> [#break]
               | "continue" sc                                                       -> [#continue]
               | "throw" spacesNoNl asgnExpr:e sc                                    -> [#throw, e]
               | "try" block:t "catch" "(" "name":e ")" block:c
                             ( "finally" block
                             | empty -> [#get, 'undefined'] ):f                      -> [#try, t, e, c, f]
               | "return" ( expr
                          | empty -> [#get, 'undefined'] ):e sc                      -> [#return, e]
               | "with" "(" expr:x ")" stmt:s                                        -> [#with, x, s]
               | @iName:label ":" stmt:s                                             -> [#label, label, s]
               | expr:e sc                                                           -> e
               | ";"                                                                 -> [#get, "undefined"],
  srcElem      = "function" "name":n funcRest:f                                      -> [#var, [n, f]]
               | stmt,
  srcElems     = srcElem*:ss                                                        -> [#begin].concat(ss),

  topLevel     = srcElems:r spaces end                                               -> r
}
BSJSParser.hexDigits = "0123456789abcdef"
BSJSParser.keywords  = { }
var keywords = ["break", "case", "catch", "continue", "default", "delete", "do", "else", "finally", "for", "function", "if", "in",
                "instanceof", "new", "return", "switch", "this", "throw", "try", "typeof", "var", "void", "while", "with", "ometa"]
for (var idx = 0; idx < keywords.length; idx++)
  BSJSParser.keywords[keywords[idx]] = true
BSJSParser._isKeyword = function(k) { return BSJSParser.keywords.hasOwnProperty(k) }


ometa BSSemActionParser <: BSJSParser {
  curlySemAction = "{" asgnExpr:r sc "}" spaces                              -> r
                 | "{" (srcElem:s &srcElem -> s)*:ss
                       ( asgnExpr:r sc -> [#return, r] | srcElem):s {ss.push(s)}
                   "}" spaces                                                -> [#send, #call,
                                                                                        [#func, [], [#begin].concat(ss)],
                                                                                        [#this]],
  semAction      = curlySemAction
                 | primExpr:r spaces                                         -> r
}

ometa BSJSIdentity {
  trans      = [:t apply(t):ans]     -> ans
             | [:t] -> t,

  curlyTrans = [#begin curlyTrans:r] -> [#begin, r]
             | [#begin trans*:rs]    -> ([#begin].concat(rs))
             | trans:r               -> r,

  this                                                  -> [#this],
  break                                                 -> [#break],
  continue                                              -> [#continue],
  number   :n                                           -> [#number, n],
  string   :s                                           -> [#string, s],
  regExp   :x                                           -> [#regExp, x],
  arr      trans*:xs                                    -> ([#arr].concat(xs)),
  unop     :op trans:x                                  -> [#unop, op, x],
  get      :x                                           -> [#get, x],
  getp     trans:fd trans:x                             -> [#getp, fd, x],
  set      trans:lhs trans:rhs                          -> [#set, lhs, rhs],
  mset     trans:lhs :op trans:rhs                      -> [#mset, lhs, op, rhs],
  binop    :op trans:x trans:y                          -> [#binop, op, x, y],
  preop    :op trans:x                                  -> [#preop, op, x],
  postop   :op trans:x                                  -> [#postop, op, x],
  return   trans:x                                      -> [#return, x],
  with     trans:x curlyTrans:s                         -> [#with, x, s],
  label    :name trans:body                             -> [#label, name, body],
  if       trans:cond curlyTrans:t curlyTrans:e         -> [#if, cond, t, e],
  condExpr trans:cond trans:t trans:e                   -> [#condExpr, cond, t, e],
  while    trans:cond curlyTrans:body                   -> [#while, cond, body],
  doWhile  curlyTrans:body trans:cond                   -> [#doWhile, body, cond],
  for      trans:init trans:cond trans:upd
           curlyTrans:body                              -> [#for, init, cond, upd, body],
  forIn    trans:x trans:arr curlyTrans:body            -> [#forIn, x, arr, body],
  begin    trans:x end                                  -> ([#begin, x]),
  begin    trans*:xs                                    -> ([#begin].concat(xs)),
  func     :args curlyTrans:body                        -> [#func, args, body],
  call     trans:fn trans*:args                         -> ([#call, fn].concat(args)),
  send     :msg trans:recv trans*:args                  -> ([#send, msg, recv].concat(args)),
  new      ( anything:str ?(typeof str === 'string') -> str
           | trans
           ):cls trans*:args                            -> ([#new, cls].concat(args)),
  var      varItem+:vs                                  -> ([#var].concat(vs)),
  varItem = [:n trans:v]                                -> [n, v]
          | [:n]                                        -> [n],
  throw    trans:x                                      -> [#throw, x],
  try      curlyTrans:x :name curlyTrans:c curlyTrans:f -> [#try, x, name, c, f],
  json     trans*:props                                 -> ([#json].concat(props)),
  binding  :name trans:val                              -> [#binding, name, val],
  switch   trans:x trans*:cases                         -> ([#switch, x].concat(cases)),
  case     trans:x trans:y                              -> [#case, x, y],
  default          trans:y                              -> [#default, y]
}

ometa BSJSTranslator {
  trans      = [:t apply(t):ans]     -> ans,
  curlyTrans = [#begin curlyTrans:r] -> r
             | [#begin trans*:rs]    -> ('{' + rs.join(';') + '}')
             | trans:r               -> ('{' + r + '}'),

  this                                                  -> 'this',
  break                                                 -> 'break',
  continue                                              -> 'continue',
  number   :n                                           -> ('(' + n + ')'),
  string   :s                                           -> JSON.stringify(s),
  regExp   :x                                           -> x,
  arr      trans*:xs                                    -> ('[' + xs.join(',') + ']'),
  unop     :op trans:x                                  -> ('(' + op + ' ' + x + ')'),
  getp     trans:fd trans:x                             -> (x + '[' + fd + ']'),
  get      :x                                           -> x,
  set      trans:lhs trans:rhs                          -> ('(' + lhs + '=' + rhs + ')'),
  mset     trans:lhs :op trans:rhs                      -> ('(' + lhs + op + '=' + rhs + ')'),
  binop    :op trans:x trans:y                          -> ('(' + x + ' ' + op + ' ' + y + ')'),
  preop    :op trans:x                                  -> (op + x),
  postop   :op trans:x                                  -> (x + op),
  return   trans:x                                      -> ('return ' + x),
  with     trans:x curlyTrans:s                         -> ('with(' + x + ')' + s),
  label    :name curlyTrans:s                           -> (';' + name + ':' + s),
  if       trans:cond curlyTrans:t curlyTrans:e         -> ('if(' + cond + ')' + t + 'else' + e),
  condExpr trans:cond trans:t trans:e                   -> ('(' + cond + '?' + t + ':' + e + ')'),
  while    trans:cond curlyTrans:body                   -> ('while(' + cond + ')' + body),
  doWhile  curlyTrans:body trans:cond                   -> ('do' + body + 'while(' + cond + ')'),
  for      trans:init trans:cond trans:upd
           curlyTrans:body                              -> ('for(' + init + ';' + cond + ';' + upd + ')' + body),
  forIn    trans:x trans:arr curlyTrans:body            -> ('for(' + x + ' in ' + arr + ')' + body),
  begin    trans:x end                                  -> x,
  begin    (trans:x
              ( (?(x[x.length - 1] === '}') | end) -> x
              | empty                              -> (x  + ';')
              )
           )*:xs                                        -> ('{' + xs.join('') + '}'),
  func     :args curlyTrans:body                        -> ('(function (' + args.join(',') + ')' + body + ')'),
  call     trans:fn trans*:args                         -> (fn + '(' + args.join(',') + ')'),
  send     :msg trans:recv trans*:args                  -> (recv + '.' + msg + '(' + args.join(',') + ')'),
  new      ( anything:str ?(typeof str === 'string') -> str
           | trans
           ):cls trans*:args                            -> ('new ' + cls + '(' + args.join(',') + ')'),
  var      varItem+:vs                                  -> ('var ' + vs.join(',')),
  varItem = [:n trans:v]                                -> (n + ' = ' + v)
          | [:n]                                        -> n,
  throw    trans:x                                      -> ('throw ' + x),
  try      curlyTrans:x :name curlyTrans:c curlyTrans:f -> ('try ' + x + 'catch(' + name + ')' + c + 'finally' + f),
  json     trans*:props                                 -> ('({' + props.join(',') + '})'),
  binding  :name trans:val                              -> (JSON.stringify(name) + ': ' + val),
  switch   trans:x trans*:cases                         -> ('switch(' + x + '){' + cases.join(';') + '}'),
  case     trans:x trans:y                              -> ('case ' + x + ': '+ y),
  default          trans:y                              -> ('default: ' + y)
}
