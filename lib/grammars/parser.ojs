var _     = require('../nodes')
  , utils = require('../utils');

ometa Parser {
  spacesNoNl       = (~'\n' space)*,
  sc               = spacesNoNl ('\n' | ';' | &'}' | end),
  _                = spacesNoNl,
  __               = (~'\n' space)+,
  
  comment          =  ``//'' (~'\n' anything)* '\n',
  
  identFirst       = letter | '$' | '_',
  identRest        = identFirst | digit | '-' | '?',
  identifier       = _ <identFirst identRest*>:id                                         -> _.Id(id),
  
  hexDigit         = char:x {"0123456789abcdef".indexOf(x.toLowerCase())}:v ?(v >= 0)     -> v,
  hex              = <``0x'' hexDigit+>:d                                                 -> _.Number(parseInt(d)).kind('hex'),
  
  decimalInt       = '0' | (~'0' digit) (digit | '_')*,
  expPart          = ('e' | 'E') ('+' | '-')? digit+,
  
  decimal          = <'-'? decimalInt ('.' digit+)? expPart?>:f                           -> _.Number(f)
                   | <'-'? ('.' digit+) expPart?>:f                                       -> _.Number(f),
  
  number           = _ (hex | decimal),
  
  // allows string-substitution like "foo #{bar} baz"
  escapeSeq        = <'\\' ( 'u' hexDigit hexDigit hexDigit hexDigit
                           | 'x' hexDigit hexDigit
                           | char                                    
                           )>:s                                                           -> unescape(s),
  strSubst         = ``#{'' _ messageSend:e _ '}'                                         -> e,
  strPart          = <(escapeSeq | ~('"'| ``#{'') char)+>:cs                              -> _.String(cs),
  string           = _ (``""''                                                            -> _.String("") //preserve empty strings
                       | '"' (strSubst | strPart)+:cs '"'                                 -> _.StringExpr(cs)
                       ),

  symbol           = _ "'" <(<identFirst identRest*> | ':')+>:cs                          -> _.String(cs),

  reBody           = reFirst reChar*,
  reChar           = reFirst | '*',
  reFirst          = ~('*' | '/' | '[') reClassChar
                   | reClass
                   | ']',
  reClass          = '[' reClassChar* ']',
  reClassChar      = escapeSeq
                   | ~(']' | '\\' | '\n' | '\r') char,
  reFlag           = letter,
  regexp           = _ '/' <reBody>:b '/' <reFlag+>:f                                     -> _.RegExp(b).flags(f)
                   | _ '/' <reBody>:b '/'                                                 -> _.RegExp(b)
                   | _ '/' _ '/'                                                          -> _.RegExp(),
  
  funarg           = '*' identifier:a                                                     -> _.VarArg(a)
                   | identifier,

  lambda           = _ '{' _ listOf(#funarg, ","):args _ '|' _ exprs:exprs _ '}'          -> _.Lambda(_.FunArgs(args), _.FunBody(exprs))
                   | _ '{' _ exprs:exprs _ '}'                                            -> _.Lambda(_.FunArgs([]),   _.FunBody(exprs))
                   | _ '{' spaces '}'                                                     -> _.Lambda(_.FunArgs([]),   _.FunBody(exprs))
                   | partialLambda,

  partialLambda    = _ ``@{'' spaces ``}''                                                -> _.PartialLambda(_.Id("nil"))
                   | _ ``@{'' _ primExpr:exp _``}''                                       -> _.PartialLambda(exp)
                   | _ ``@{'' _ messageSend:msg _``}''                                    -> _.PartialLambda(msg),
  
  map              = _ ``#{'' _ listOf(#mapBinding, ","):bs _ ``}''                       -> _.Map(bs),
  mapBinding       = _ identifier:n _ ``:'' _ messageSend:v                               -> _.KeyValuePair(_.String(n.value()), v),
  
  array            = _ '[' _ listOf(#messageSend, ","):exprs _ ']'                        -> _.Array(exprs),
  
  rawJS            = _ '`' <(~('`') char)+>:js '`'                                        -> _.RawJS().value(js),
  
  assignOp         = ( ``=''  |``:=''    | ``+='' | ``-=''  | ``*='' | ``/=''
                     | ``%='' | ``<<=''  | ``^='' | ``&&='' | ``&='' | ``||=''
                     | ``|='' | ``>>>='' | ``>>=''
                     ),
  orOp             = ( ``||'' | ``or''  ),
  andOp            = ( ``&&'' | ``and'' ),
  bitOrOp          =   ``|'',
  bitXorOp         =   ``^'',
  bitAndOp         =   ``&'',
  eqOp             = ( ``=='' | ``!='' ),
  shiftOp          = ( ``>>>''| ``>>'' | ``<<'' ),
  relOp            = ( ``<='' | ``<'' | ``>='' | ``>''),
  addOp            = ( ``+''  | ``-'' ),
  mulOp            = ( ``*''  | ``/''  | ``%''  ),
  
  binOp            = ( orOp     | andOp   | bitOrOp | bitXorOp | bitAndOp | eqOp
                     | assignOp | shiftOp | relOp   | addOp    | mulOp ),
  
  binaryMessage    = identifier:lhs _ assignOp:op __ messageSend:rhs                        -> _.AssignMsg(lhs, rhs).operator(op)
                   | methodDef
                   | orExpr,
  orExpr           = _ orOp:op     __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | andExpr,
  andExpr          = _ andOp:op    __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | bitOrExpr,
  bitOrExpr        = _ bitOrOp:op  __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | bitXorExpr,
  bitXorExpr       = _ bitXorOp:op __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | bitAndExpr,
  bitAndExpr       = _ bitAndOp:op __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | eqExpr,
  eqExpr           = _ eqOp:op     __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | shiftExpr,
  shiftExpr        = _ shiftOp:op  __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | relExpr,
  relExpr          = _ relOp:op    __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | addExpr,
  addExpr          = _ addOp:op    __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | mulExpr,
  mulExpr          = _ mulOp:op    __ messageSend:rhs                                       -> _.BinaryMsg(rhs).operator(op)
                   | "." interopExpr:e                                                      -> _.DotMsg(e)
                   | interopExpr,
  
  interopExpr      = interopExpr:p callExpr(p)
                   | interopExpr:p memberExpr(p)
                   | primExpr,

  callExpr      :p = '(' listOf(#messageSend, ','):as ')'                                   -> _.CallMsg(p, as),

  memberExpr    :p = ( '[' messageSend:i ']'                                                -> _.MemberMsg(p, i)
                     | '.' identifier:f                                                     -> _.MemberMsg(p).name(f.value())
                     ),

  literalExpr      = (string | symbol | number | regexp | map | lambda | array),
  
  primExpr         = _ '(' messageSend:e ')'                                                -> e
                   | _ identifier
                   |   literalExpr
                   | _ rawJS
                   | _ comment,

  keyword          = _ identifier:n _ ':'                                                   -> _.Keyword(n),

  keywordExpr      = keyword:k _ listOf(#unaryMessage, ","):e                                   -> [k, e],
  
  keywordMessage   = keywordMessage:m keywordExpr:e                                         -> m.concat(e)
                   | keywordExpr,
  
  
  keywordDefPart   = keyword:k __ ( identifier:a _ '(' _ messageSend:opt _ ')'              -> [k, _.OptArg(a, opt)]
                                  | '*' _ identifier:a                                      -> [k, _.VarArg(a)]
                                  | identifier:a                                            -> [k, a]
                                  ),
  keywordDef       = keywordDef:m keywordDefPart:e                                          -> m.concat(e)
                   | keywordDefPart,
  
  methodBody       = _ '{' _ exprs:e _ '}'                                                  -> _.Lambda(_.FunArgs([]),   _.FunBody(e))
                   | spaces messageSend:e                                                   -> _.Lambda(_.FunArgs([]), _.FunBody([e])),

  methodDef        = keywordDef:n _ ``:='':op methodBody:e                                  -> _.MethodDef(_.KeywordDef(n), e)
                   | binOp:n      __ identifier:rhs __ ``:='':op methodBody:e               -> _.MethodDef(_.Id(n), _.Lambda(_.FunArgs([rhs]), e[3]).name(n))
                   | identifier:n _ ``:='':op methodBody:e                                  -> _.MethodDef(n, e.name(n.value())),
  
  unaryMessage     = unaryMessage:r __ ~keyword binaryMessage:e                             -> _.UnaryMsg(r, e)
                   | ~keyword binaryMessage,

  messageSend      = ``require:'' _ string:path                                             -> _.Require().path(path.value())
                   | methodDef:m                                                            -> m
                   | unaryMessage:r __ methodDef:m                                          -> _.UnaryMsg(r, m)
                   | keywordMessage:m                                                       -> _.KeywordMsg(m)
                   | unaryMessage:r __ keywordMessage:m                                     -> _.UnaryMsg(r, _.KeywordMsg(m))
                   | unaryMessage
                   | binaryMessage,
  
  
  expr             = spaces messageSend:m sc spaces                                         -> m,
  
  exprs            = expr*,
  
  topLevel         = exprs:exprs end                                                        -> _.File(exprs)
}

Parser.position = function (token) {
  var len      = this.input.lst.length;
  var lines    = this.input.lst.substr(0, len - (len - this.input.idx)).split('\n');
  var line     = lines.length - 1;
  var end      = lines[line].length - 1;
  var start    = end - (token.length - 1);
  return {line: line, start: start, end: end};
};

Parser.parse = function (source, fname, rule) {
  var tree = Parser.matchAll(source, rule || 'topLevel', []);

  Object.defineProperty(tree, "to_s", {
    value      : function () { return utils.to_string(this); },
    enumerable : false
  });

  Object.defineProperty(tree, "print", {
    value: function () { console.log(this.to_s()); },
    enumerable: false
  });

  Object.defineProperty(tree, "print_tree", {
    value      : function () { console.log(utils.print_tree(this)); },
    enumerable : false
  });
  
  return tree.hasType("File") ? tree.name(fname) : tree;
};

Parser.parseFrom = function (source, rule, fname) {
  return this.parse(source, fname || '', rule);
};

module.exports = Parser;