var JsonMLWalker = require('jsonml').walker;

ometa Translator <: JsonMLWalker {
  File               :attr = walk*:cs                                     -> tmpl.File           ( attr, cs         ),
  Require            :attr                                                -> tmpl.Require        ( attr             ),
  ReturnStmt         :attr = walk:message                                 -> tmpl.Return         ( attr, message    ),
  NonLocalReturnStmt :attr = walk:message                                 -> tmpl.NonLocalReturn ( attr, message    ),
  Id                 :attr                                                -> tmpl.Id             ( attr             ),
  Number             :attr                                                -> tmpl.Number         ( attr             ),
  String             :attr                                                -> tmpl.String         ( attr             ),
  StringExpr         :attr = walk*:exprs                                  -> tmpl.StringExpr     ( attr, exprs      ),
  Array              :attr = walk*:exprs                                  -> tmpl.Array          ( attr, exprs      ),
  RegExp             :attr                                                -> tmpl.RegExp         ( attr             ),
  RawJS              :attr                                                -> tmpl.RawJS          ( attr             ),
  Lambda             :attr = :args walk:body                              -> tmpl.Lambda         ( attr, args, body ),
  PartialLambda      :attr = walk*:body                                   -> tmpl.PartialLambda  ( attr, body       ),
  Map                :attr = walk*:bindings                               -> tmpl.Map            ( attr, bindings   ),
  KeyValuePair       :attr = walk:key walk:value                          -> tmpl.KeyValuePair   ( attr, key, value ),
  Method             :attr = :args walk:body                              -> tmpl.Method         ( attr, args, body ),
  FunArgs            :attr = walk*:args                                   -> tmpl.FunArgs        ( attr, args       ),
  VarArg             :attr = :arg                                         -> tmpl.VarArg         ( attr, arg        ),
  FunBody            :attr = walk*:exprs                                  -> tmpl.FunBody        ( attr, exprs      ),
  UnaryMsg           :attr = walk:recv :msg                               -> tmpl.UnaryMsg       ( attr, recv, msg  ),
  KeywordMsg         :attr = walk*:args                                   -> tmpl.KeywordMsg     ( attr, args       ),
  KeywordDef         :attr = walk*:args                                   -> tmpl.KeywordDef     ( attr, args       ),
  KeywordArg         :attr = walk*:args                                   -> tmpl.KeywordArg     ( attr, args       ),
  BinaryMsg          :attr = walk:op                                      -> tmpl.BinaryMsg      ( attr, op         ),
  DotMsg             :attr = walk:e                                       -> tmpl.DotMsg         ( attr, e          ),
  CallMsg            :attr = walk:e walk*:args                            -> tmpl.CallMsg        ( attr, e, args    ),
  MemberMsg          :attr = ?attr.is('access', 'name') walk:e            -> tmpl.AccessMsg      ( attr, e          )
                           | walk:e walk:ae                               -> tmpl.ComputedMsg    ( attr, e, ae      ),
  AssignMsg          :attr = :id :expr                                    -> tmpl.AssignMsg      ( attr, id, expr   ),
  MethodDef          :attr = :id walk:expr                                -> tmpl.MethodDef      ( attr, id, expr   )
}

var tmpl = require('../templates')(Translator);
tmpl.tab_width = 2;

Translator.force_rules = false;

Translator.translate = function (input) {
  return Translator.match(input, 'walk');
};

module.exports = Translator;