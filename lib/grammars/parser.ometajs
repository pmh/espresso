var _     = require('../nodes')
  , utils = require('../utils');

ometa Parser {
  
  hexDigit         = char:x {"0123456789abcdef".indexOf(x.toLowerCase())}:v ?(v >= 0)     -> v,
  hex              = <``0x'' hexDigit+>:d                                                 -> _.Number(parseInt(d)).kind('hex'),
  
  decimalInt       = '0' | (~'0' digit) (digit | '_')*,
  expPart          = ('e' | 'E') ('+' | '-')? digit+,
  
  decimal          = <'-'? decimalInt ('.' digit+)? expPart?>:f                           -> _.Number(f)
                   | <'-'? ('.' digit+) expPart?>:f                                       -> _.Number(f),
  
  number           = hex | decimal,
  
  topLevel         = spaces end                                                           -> _.File([])
}

Parser.position = function (token) {
  var len      = this.input.lst.length;
  var lines    = this.input.lst.substr(0, len - (len - this.input.idx)).split('\n');
  var line     = lines.length - 1;
  var end      = lines[line].length - 1;
  var start    = end - (token.length - 1);
  return {line: line, start: start, end: end};
};

Parser.parse = function (source, fname, rule) {
  var tree = Parser.matchAll(source, rule || 'topLevel', []);
  tree.define_keyword('to_s',       function () { return utils.to_string(this);        });
  tree.define_keyword('print',      function () { console.log(this.to_s());            });
  tree.define_keyword('print_tree', function () { console.log(utils.print_tree(this)); });
  
  return tree.name ? tree.name(fname) : tree;
};

Parser.parseFrom = function (source, rule, fname) {
  return this.parse(source, fname || '', rule);
};